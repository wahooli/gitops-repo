image:
  tag: "1.41.3" # {"$imagepolicy": "flux-system:plex:tag"}
hostname: nasse
runtimeClassName: nvidia
strategy:
  type: Recreate
hostNetwork: true
metrics:
  enabled: true
  image:
    repository: ghcr.io/jsclayton/prometheus-plex-exporter
    tag: "main"
    digest: "sha256:18ef1b2197efbcb75bd7276380955760995f10a9fbe55106809a6fcff91c2940"
  resources:
    limits:
      cpu: 100m
      memory: 100Mi
serviceMonitor:
  create: true
  jobLabel: app.kubernetes.io/name
  endpoints:
  - targetPort: 9594
    path: /metrics
    scheme: http
    interval: 15s
    metricRelabelConfigs:
    - action: replace
      replacement: nasse
      target_label: instance
    - action: replace
      replacement: nasse
      target_label: server
    - action: labeldrop
      regex: (pod|container_id|image_id|container|service|namespace|prometheus)
    - action: drop
      regex: ^(plex_up|plex_info|plex_media_count|plex_media_downloads_count)$
      source_labels:
      - __name__
  - targetPort: 9000
    path: /metrics
    scheme: http
    metricRelabelConfigs:
    - action: replace
      replacement: nasse
      target_label: instance
    - action: labeldrop
      regex: (pod|container_id|image_id|container|service|namespace|prometheus)
    - action: drop
      regex: ^(go_.*|promhttp_.*)$
      source_labels:
      - __name__
dnsConfig:
  options:
  - name: ndots
    value: "1"
  - name: edns0
envFrom:
  envs:
    type: configMap
    useFromChart: false
    name: plex-env
podAnnotations:
  backup.velero.io/backup-volumes: config
  vector.dev/exclude-containers: "prometheus-exporter,plex-media-server-exporter"
global:
  labels:
    backupWeekly: "true"
    backupDaily: "true"
    app.kubernetes.io/part-of: plex
configMaps:
- name: library-import-initscript
  data:
    import-config.sh: |
      #!/bin/sh
      echo "waiting for pre-existing pms database to uploaded..."

      if [ "$PLEX_SKIP_INIT_WAIT" == "1" ]; then
        mkdir -p /config/Library
        chown -R 2000:2000 /config
      fi

      if [ -d "/config/Library" ]; then
        echo "PMS library already exists, exiting."
        exit 0
      fi

      # wait for the database archive to be manually copied to the server
      while [ ! -f /pms.tgz ]; do sleep 2; done;

      tar -xvzf /pms.tgz -C /config
      chown -R 2000:2000 /config
      rm -rf /config/Library/Application\ Support/Plex\ Media\ Server/Codecs/*
      rm pms.tgz

      echo "Done."
containers:
  plex-media-server-exporter:
    image:
      repository: ghcr.io/axsuul/plex-media-server-exporter
      tag: "2.1.0"
    env:
      PLEX_SERVER: http://127.0.0.1:32400
      PLEX_ADDR: http://127.0.0.1:32400
    command:
    - /entrypoint-override.sh
    args:
    - bundle
    - exec
    - puma
    - -b
    - tcp://0.0.0.0:9594
    ports:
    - containerPort: 9594
      name: metrics
      protocol: TCP
    volumeMounts:
    - name: shared
      mountPath: /shared
      readOnly: true
      recursiveReadOnly: IfPossible
    - mountPath: /entrypoint-override.sh
      name: metrics-entrypoint
      subPath: entrypoint-override.sh
    probe:
      readiness:
        httpGet:
          path: /
          port: metrics
        failureThreshold: 10
        initialDelaySeconds: 5
        periodSeconds: 5
        timeoutSeconds: 1
      liveness:
        httpGet:
          path: /
          port: metrics
        failureThreshold: 10
        initialDelaySeconds: 5
        periodSeconds: 5
        timeoutSeconds: 1
      startup:
        exec:
          command:
          - sh
          - -c
          - test -e /shared/token
        periodSeconds: 5
        failureThreshold: 120
        successThreshold: 1
        timeoutSeconds: 1
    resources:
      limits:
        cpu: 100m
        memory: 100Mi
initContainers:
  import-configuration:
    image: alpine:3.18.0
    imagePullPolicy: IfNotPresent
    command: ["/import-config.sh"]
    env:
    - name: PLEX_SKIP_INIT_WAIT
      value: "${plex_skip_init_wait:=0}"
    volumeMounts:
    - mountPath: /config
      name: config
    - mountPath: /import-config.sh
      name: initcontainer-entrypoint
      subPath: import-config.sh
# resources:
#   limits:
#     nvidia.com/gpu: 1
#   requests:
#     memory: "256Mi"
#     cpu: "400m"
#   limits:
#     memory: "3072Mi"
#     cpu: "1000m"
persistence:
  initcontainer-entrypoint:
    enabled: true
    spec:
      useFromChart: true
      configMap:
        name: library-import-initscript
        defaultMode: 0777
  config:
    enabled: true
    mount:
    - path: /config
    spec:
      isPersistentVolumeClaim: true
      accessModes:
      - "ReadWriteOnce"
      resources:
        requests:
          storage: "50Gi"
    # spec:
    #   persistentVolumeClaim:
    #     claimName: config-plex
  movies:
    enabled: true
    mount:
    - path: /data/Movies
    spec:
      hostPath:
        path: ${plex_movies_host_path}
        type: Directory
  tv:
    enabled: true
    mount:
    - path: /data/Series
    spec:
      hostPath:
        path: ${plex_tv_host_path}
        type: Directory
  transcode:
    enabled: true
    mount:
    - path: /transcode
    spec:
      emptyDir:
        sizeLimit: 20Gi
        medium: Memory
service:
  main:
    annotations:
      service.cilium.io/global: "true"
ingress:
  main:
    enabled: true
    className: nginx
    labels:
      velero.io/exclude-from-backup: "true"
    hosts:
    - host: plex.wahoo.li
      paths:
      - path: "/"
        pathType: "Prefix"
    tls:
    - secretName: tls-plex-ingress
      hosts:
      - plex.wahoo.li
