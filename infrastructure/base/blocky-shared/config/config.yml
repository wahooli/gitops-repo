upstreams:
  init:
    # Configure startup behavior.
    # accepted: blocking, failOnError, fast
    # default: blocking
    strategy: failOnError
  groups:
    default:
    - tcp+udp:${unbound_cluster_ip}:${dns_svc_port:=53}
  strategy: strict
  # optional: timeout to query the upstream resolver. Default: 2s
  timeout: 2s
  # optional: HTTP User Agent when connecting to upstreams. Default: none
  userAgent: none

# optional: Determines how blocky will create outgoing connections. This impacts both upstreams, and lists.
# accepted: dual, v4, v6
# default: dual
connectIPVersion: v4

customDNS:
  customTTL: 1h
  filterUnmappedTypes: false
  mapping:
    # even if these are defined in bind9, these are added here since blocky creates also PTR records for these
    ns1.absolutist.it: ${dns_ip_addr_1}
    ns2.absolutist.it: ${dns_ip_addr_2}
    ns1.wahoo.li: ${dns_ip_addr_1}
    ns2.wahoo.li: ${dns_ip_addr_2}
    dns.absolutist.it: ${dns_ip_addr_1},${dns_ip_addr_2}
    dns.wahoo.li: ${dns_ip_addr_1},${dns_ip_addr_2}
    kubedns.absolutist.it: ${dns_ip_addr_3}
    kubedns.wahoo.li: ${dns_ip_addr_3}

# optional: definition, which DNS resolver(s) should be used for queries to the domain (with all sub-domains). Multiple resolvers must be separated by a comma
# Example: Query client.fritz.box will ask DNS server 192.168.178.1. This is necessary for local network, to resolve clients by host name
conditional:
  # optional: if false (default), return empty result if after rewrite, the mapped resolver returned an empty answer. If true, the original query will be sent to the upstream resolver
  # Example: The query "blog.example.com" will be rewritten to "blog.fritz.box" and also redirected to the resolver at 192.168.178.1. If not found and if `fallbackUpstream` was set to `true`, the original query "blog.example.com" will be sent upstream.
  # Usage: One usecase when having split DNS for internal and external (internet facing) users, but not all subdomains are listed in the internal domain.
  fallbackUpstream: false
  mapping:
    .: ${router_ip}
    ${purola_cidr_reverse}: ${purola_router_ip}
    purola: ${purola_router_ip}
    lan: ${router_ip}
    svc: ${router_ip}
    guest: ${router_ip}
    iot: ${router_ip}
    not: ${router_ip}
    mgmt: ${router_ip}
    # ${cluster_pod_cidr_reverse}: tcp+udp:${cluster_dns_ip}
    # ${cluster_service_cidr_reverse}: tcp+udp:${cluster_dns_ip}
    wahoo.li: tcp+udp:${bind9_cluster_ip}
    absolutist.it: tcp+udp:${bind9_cluster_ip}
    ${nas_ip_reverse}: tcp+udp:${bind9_cluster_ip}
    ${tpi_1_ip_reverse}: tcp+udp:${bind9_cluster_ip}
    ${router_ip_reverse_1}: ${router_ip}
    ${router_ip_reverse_2}: ${router_ip}
    ${router_ip_reverse_3}: ${router_ip}

# optional: use black and white lists to block queries (for example ads, trackers, adult pages etc.)
blocking:
  # definition of blacklist groups. Can be external link (http/https) or local file
  denylists:
    homeassistant: []
    iot:
    - |
      *.svc
      *.lan
      *.guest
      *.not
      *.purola
      *.mgmt
      *.16.172.in-addr.arpa
      *.10.in-addr.arpa
      *.${lan_cidr_reverse}
      *.${guest_cidr_reverse}
      *.${not_cidr_reverse}
      *.${purola_cidr_reverse}
    not:
    - /app/tlds-alpha-by-domain.txt
    - |
      *.mgmt
      *.svc
      *.lan
      *.guest
      *.iot
      *.purola
      *.in-addr.arpa
    guest:
    - |
      *.mgmt
      *.svc
      *.lan
      *.not
      *.purola
      *.16.172.in-addr.arpa
      *.10.in-addr.arpa
      *.${lan_cidr_reverse}
      *.${not_cidr_reverse}
      *.${purola_cidr_reverse}
    ads:
    - https://raw.githubusercontent.com/AlexRabbit/ADios/master/PIHOLE/hosts
    - https://adguardteam.github.io/HostlistsRegistry/assets/filter_1.txt
    - https://adguardteam.github.io/HostlistsRegistry/assets/filter_2.txt
    - https://s3.amazonaws.com/lists.disconnect.me/simple_ad.txt
    - https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
    - http://sysctl.org/cameleon/hosts
    - https://s3.amazonaws.com/lists.disconnect.me/simple_tracking.txt
    - https://raw.githubusercontent.com/jerryn70/GoodbyeAds/master/Extension/GoodbyeAds-YouTube-AdBlock.txt
  # definition of whitelist groups. Attention: if the same group has black and whitelists, whitelists will be used to disable particular blacklist entries. If a group has only whitelist entries -> this means only domains from this list are allowed, all other domains will be blocked
  allowlists:
    homeassistant:
    - |
      *.lan
      *.svc
      *.guest
      *.iot
      *.not
      *.purola
      *.10.in-addr.arpa
      *.${lan_cidr_reverse}
      *.${guest_cidr_reverse}
      *.${not_cidr_reverse}
      *.16.172.in-addr.arpa
    not:
    - |
      *.not
      *.${not_cidr_reverse}
    ads:
    - /app/ads-whitelist.txt
  # definition: which groups should be applied for which client
  clientGroupsBlock:
    # default will be used, if no special definition for a client name exists
    default:
    - ads
    homeassistant*:
    - ads
    - iot
    - homeassistant
    ${guest_cidr}:
    - ads
    - guest
    ${iot_cidr}:
    - ads
    - iot
    ${not_cidr}:
    - not
  # which response will be sent, if query is blocked:
  # zeroIp: 0.0.0.0 will be returned (default)
  # nxDomain: return NXDOMAIN as return code
  # comma separated list of destination IP addresses (for example: 192.100.100.15, 2001:0db8:85a3:08d3:1319:8a2e:0370:7344). Should contain ipv4 and ipv6 to cover all query types. Useful with running web server on this address to display the "blocked" page.
  # blockType: nxDomain
  blockType: zeroIp
  # optional: TTL for answers to blocked domains
  # default: 6h
  blockTTL: 30m
  loading:
    # optional: list refresh period in duration format.
    # Set to a value <= 0 to disable.
    # default: 4h
    refreshPeriod: 24h
    # optional: Applies only to lists that are downloaded (HTTP URLs).
    downloads:
      # optional: timeout for list download (each url). Use large values for big lists or slow internet connections
      # default: 5s
      timeout: 60s
      # optional: Maximum download attempts
      # default: 3
      attempts: 5
      # optional: Time between the download attempts
      # default: 500ms
      cooldown: 10s
    # optional: Maximum number of lists to process in parallel.
    # default: 4
    concurrency: 16
    # Configure startup behavior.
    # accepted: blocking, failOnError, fast
    # default: blocking
    strategy: failOnError
    # Number of errors allowed in a list before it is considered invalid.
    # A value of -1 disables the limit.
    # default: 5
    maxErrorsPerSource: 15

# optional: configuration for caching of DNS responses
caching:
  # duration how long a response must be cached (min value).
  # If <=0, use response's TTL, if >0 use this value, if TTL is smaller
  # Default: 0
  minTime: 5m
  # duration how long a response must be cached (max value).
  # If <0, do not cache responses
  # If 0, use TTL
  # If > 0, use this value, if TTL is greater
  # Default: 0
  maxTime: 60m
  # Max number of cache entries (responses) to be kept in cache (soft limit). Useful on systems with limited amount of RAM.
  # Default (0): unlimited
  maxItemsCount: 0
  # if true, will preload DNS results for often used queries (default: names queried more than 5 times in a 2-hour time window)
  # this improves the response time for often used queries, but significantly increases external traffic
  # default: false
  prefetching: true
  # prefetch track time window (in duration format)
  # default: 120
  prefetchExpires: 2h
  # name queries threshold for prefetch
  # default: 5
  prefetchThreshold: 5
  # Max number of domains to be kept in cache for prefetching (soft limit). Useful on systems with limited amount of RAM.
  # Default (0): unlimited
  prefetchMaxItemsCount: 0
  # Time how long negative results (NXDOMAIN response or empty result) are cached. A value of -1 will disable caching for negative results.
  # Default: 30m
  cacheTimeNegative: 30m

# filtering:
#   queryTypes:
#     - AAAA

# optional: configuration of client name resolution
clientLookup:
  # optional: this DNS resolver will be used to perform reverse DNS lookup (typically local router)
  upstream: ${router_ip}
  # optional: some routers return multiple names for client (host name and user defined name). Define which single name should be used.
  # Example: take second name if present, if not take first name
  singleNameOrder:
  - 1
  - 2

# optional: configuration for prometheus metrics endpoint
prometheus:
  # enabled if true
  enable: true
  # url path, optional (default '/metrics')
  path: /metrics

# optional: Mininal TLS version that the DoH and DoT server will use
minTlsServeVersion: 1.3
# if https port > 0: path to cert and key file for SSL encryption. if not set, self-signed certificate will be generated
certFile: /app/certs/tls.crt
keyFile: /app/certs/tls.key

# optional: ports configuration
ports:
  # optional: DNS listener port(s) and bind ip address(es), default 53 (UDP and TCP). Example: 53, :53, "127.0.0.1:5353,[::1]:5353"
  dns: 53
  # optional: Port(s) and bind ip address(es) for DoT (DNS-over-TLS) listener. Example: 853, 127.0.0.1:853
  tls: 853
  # optional: Port(s) and optional bind ip address(es) to serve HTTPS used for prometheus metrics, pprof, REST API, DoH... If you wish to specify a specific IP, you can do so such as 192.168.0.1:443. Example: 443, :443, 127.0.0.1:443,[::1]:443
  https: 443
  # optional: Port(s) and optional bind ip address(es) to serve HTTP used for prometheus metrics, pprof, REST API, DoH... If you wish to specify a specific IP, you can do so such as 192.168.0.1:4000. Example: 4000, :4000, 127.0.0.1:4000,[::1]:4000
  http: 4000

# optional: logging configuration
log:
  # optional: Log level (one from debug, info, warn, error). Default: info
  level: info
  # optional: Log format (text or json). Default: text
  format: json
  # optional: log timestamps. Default: true
  timestamp: true
  # optional: obfuscate log output (replace all alphanumeric characters with *) for user sensitive data like request domains or responses to increase privacy. Default: false
  privacy: false

# optional: add EDE error codes to dns response
ede:
  # enabled if true, Default: false
  enable: false

# optional: configure extended client subnet (ECS) support
ecs:
  # optional: if the request ecs option with a max sice mask the address will be used as client ip
  useAsClient: true
  # optional: if the request contains a ecs option it will be forwarded to the upstream resolver
  forward: true
